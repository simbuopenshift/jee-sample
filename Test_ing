import com.google.cloud.bigquery.*;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.UUID;

@Service
public class BigQueryService {

    private static final String PROJECT_ID = "your-project-id";
    private static final String DATASET_ID = "your-dataset-id";
    private static final String TABLE_ID = "your-table-id";
    private static final int BATCH_SIZE = 1000; // Adjust batch size as needed

    public void insertData(List<Map<String, Object>> data) {
        BigQuery bigQuery = BigQueryOptions.getDefaultInstance().getService();

        // Split data into batches
        for (int i = 0; i < data.size(); i += BATCH_SIZE) {
            int endIndex = Math.min(i + BATCH_SIZE, data.size());
            List<Map<String, Object>> batch = data.subList(i, endIndex);
            insertBatch(bigQuery, batch);
        }
    }

    private void insertBatch(BigQuery bigQuery, List<Map<String, Object>> batch) {
        try {
            String jobId = UUID.randomUUID().toString();
            TableId tableId = TableId.of(PROJECT_ID, DATASET_ID, TABLE_ID);

            InsertAllRequest.Builder builder = InsertAllRequest.newBuilder(tableId);
            for (Map<String, Object> row : batch) {
                builder.addRow(row);
            }

            InsertAllResponse response = bigQuery.insertAll(builder.build());

            if (response.hasErrors()) {
                // Handle errors
                for (Map.Entry<Long, List<BigQueryError>> entry : response.getInsertErrors().entrySet()) {
                    System.out.println("Errors for row " + entry.getKey() + ": " + entry.getValue());
                }
            } else {
                System.out.println("Batch inserted successfully.");
            }
        } catch (BigQueryException e) {
            System.out.println("Error inserting data: " + e.getMessage());
        }
    }
}
