In that case, you can use a subquery to first aggregate the `parameter` array, and then use the result in the outer query to aggregate the final XML string.

Here's an updated version of the code:

```
WITH json_data AS (
  SELECT
    '[{"text": "Data1", "parameter":[{"uom": "in", "value":"32", "altUom":"in", "altValue":"xy"},{"uom": "in", "value":"33", "altUom":"in", "altValue":"aam"}], "qualifierId":"1"}, {"text": "Data2", "parameter": null, "qualifierId":"2"},{"text": "Data3", "parameter":[{"uom": null, "value":"52", "altUom": null, "altValue":null}], "qualifierId":"3"}]' AS json
),
aggregated_parameter AS (
  SELECT
    JSON_EXTRACT_SCALAR(e, '$.qualifierId') AS qualifierId,
    JSON_EXTRACT_SCALAR(e, '$.text') AS text,
    STRING_AGG(
      CONCAT(
        '<param',
        IF(JSON_EXTRACT_SCALAR(p, '$.value') IS NOT NULL, CONCAT(' value="', JSON_EXTRACT_SCALAR(p, '$.value'), '"'), ''),
        IF(JSON_EXTRACT_SCALAR(p, '$.uom') IS NOT NULL, CONCAT(' uom="', JSON_EXTRACT_SCALAR(p, '$.uom'), '"'), ''),
        IF(JSON_EXTRACT_SCALAR(p, '$.altValue') IS NOT NULL, CONCAT(' altValue="', JSON_EXTRACT_SCALAR(p, '$.altValue'), '"'), ''),
        IF(JSON_EXTRACT_SCALAR(p, '$.altUom') IS NOT NULL, CONCAT(' altUom="', JSON_EXTRACT_SCALAR(p, '$.altUom'), '"'), ''),
        '/>'
      ),
      ''
    ) AS parameter
  FROM
    json_data,
    UNNEST(JSON_EXTRACT_ARRAY(json, '$')) AS e
  LEFT JOIN
    UNNEST(JSON_EXTRACT_ARRAY(e, '$.parameter')) AS p
  ON
    TRUE
  GROUP BY
    qualifierId, text
)
SELECT
  CONCAT(
    '<root>',
    STRING_AGG(
      CONCAT(
        '<Qual id="', qualifierId, '">',
        IF(parameter IS NOT NULL, parameter, ''),
        '<text>', text, '</text>',
        '</Qual>'
      ),
      ''
    ),
    '</root>'
  ) AS xml_data
FROM
  aggregated_parameter
```

This code first aggregates the `parameter` array in the `aggregated_parameter` subquery, and then uses the result in the outer query to aggregate the final XML string.
