import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.InsertAllRequest;
import com.google.cloud.bigquery.InsertAllResponse;
import com.google.cloud.bigquery.TableId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.zip.GZIPOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

@Service
public class BigQueryService {

    @Autowired
    private BigQuery bigQuery;

    // Split data into batches to avoid exceeding request size limit
    private List<List<Map<String, Object>>> splitIntoBatches(List<Map<String, Object>> data, int batchSize) {
        List<List<Map<String, Object>>> batches = new ArrayList<>();
        for (int i = 0; i < data.size(); i += batchSize) {
            batches.add(data.subList(i, Math.min(i + batchSize, data.size())));
        }
        return batches;
    }

    public void insertDataIntoBigQuery(String datasetId, String tableId, List<Map<String, Object>> data) {
        TableId table = TableId.of(datasetId, tableId);
        int batchSize = 1000; // Adjust batch size as needed
        List<List<Map<String, Object>>> batches = splitIntoBatches(data, batchSize);

        for (List<Map<String, Object>> batch : batches) {
            try {
                // Compress batch data
                byte[] compressedData = compressData(batch);

                // Create InsertAllRequest
                InsertAllRequest.Builder builder = InsertAllRequest.newBuilder(table);
                batch.forEach(row -> builder.addRow(row));
                InsertAllRequest request = builder.build();

                // Insert compressed data
                InsertAllResponse response = bigQuery.insertAll(request);
                // Handle response if needed
            } catch (IOException e) {
                // Handle compression error
                e.printStackTrace();
            }
        }
    }

    private byte[] compressData(List<Map<String, Object>> data) throws IOException {
        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
        try (GZIPOutputStream gzipStream = new GZIPOutputStream(byteStream)) {
            // Convert data to JSON and write to compressed stream
            // Replace with your preferred JSON serialization library
            // For example, using Jackson ObjectMapper:
            // ObjectMapper objectMapper = new ObjectMapper();
            // objectMapper.writeValue(gzipStream, data);
        }
        return byteStream.toByteArray();
    }
}
