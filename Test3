import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.BigQueryException;
import com.google.cloud.bigquery.BigQueryOptions;
import com.google.cloud.bigquery.Job;
import com.google.cloud.bigquery.JobId;
import com.google.cloud.bigquery.JobInfo;
import com.google.cloud.bigquery.JobStatistics;
import com.google.cloud.bigquery.TableId;
import com.google.cloud.storage.Blob;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import org.springframework.stereotype.Service;

import java.io.IOException;

@Service
public class GcsToBigQueryService {

    private final Storage storage = StorageOptions.getDefaultInstance().getService();
    private final BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();
    private final String bucketName = "your-gcs-bucket-name";
    private final String datasetName = "your-bigquery-dataset-name";
    private final String tableName = "your-bigquery-table-name";

    public void loadFileFromGcsToBigQuery(String fileName) throws IOException {
        // Get GCS blob
        Blob blob = storage.get(bucketName, fileName);

        // Configure BigQuery job
        TableId tableId = TableId.of(datasetName, tableName);
        JobId jobId = JobId.of();
        Job loadJob = bigquery.create(JobInfo.of(
                JobInfo.newBuilder(LoadJobConfiguration.newBuilder(tableId)
                        .setSourceFormat(FormatOptions.csv())
                        .setAutodetect(true)
                        .build())
                        .setJobId(jobId)
                        .build(),
                blob.getBlobId()));

        // Wait for the job to complete
        try {
            loadJob = loadJob.waitFor();
        } catch (InterruptedException e) {
            throw new RuntimeException("Interrupted while waiting for job to complete.", e);
        }

        // Check the job's status
        if (loadJob != null && loadJob.getStatus().getError() == null) {
            JobStatistics.LoadStatistics statistics = loadJob.getStatistics();
            System.out.println("Load statistics: " + statistics.toString());
        } else {
            throw new RuntimeException("BigQuery job failed");
        }
    }
}
