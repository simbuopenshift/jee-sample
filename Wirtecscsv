import com.google.cloud.storage.Blob;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

@SpringBootApplication
@RestController
public class GCSAccessApplication {

    public static void main(String[] args) {
        SpringApplication.run(GCSAccessApplication.class, args);
    }

    @GetMapping("/createCsv")
    public String createCsv() {
        // Set up GCS client
        Storage storage = StorageOptions.getDefaultInstance().getService();
        String bucketName = "your_bucket_name";
        String folder1 = "folder1";
        String folder2 = "folder2";

        // Get list of objects from subfolders
        List<Blob> blobs = storage.list(bucketName, Storage.BlobListOption.prefix(folder1 + "/" + folder2 + "/")).getValues();

        // Prepare data
        List<YourPojo> yourPojoList = prepareData(); // Implement this method to prepare your data

        // Create CSV file
        String fileName = "data_" + new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()) + ".csv";
        try (FileWriter writer = new FileWriter(fileName)) {
            // Write custom headers
            writer.append("Header1|Header2|Header3\n");

            // Write data
            for (YourPojo pojo : yourPojoList) {
                writer.append(pojo.getField1()).append("|")
                      .append(pojo.getField2()).append("|")
                      .append(pojo.getField3()).append("\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
            return "Failed to create CSV file";
        }

        return "CSV file created successfully with name: " + fileName;
    }

    // Define your POJO class here

    // Implement method to prepare data
    private List<YourPojo> prepareData() {
        // Implement this method to prepare your data
        return null;
    }
}
