Sure, here's the full end-to-end Spring Boot application code using MapStruct for object mapping and Gradle as the build tool:

**build.gradle:**

```groovy
plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'io.r2dbc:r2dbc-postgresql'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}
```

**EmployeeEntity.java:**

```java
import org.springframework.data.annotation.Id;
import org.springframework.data.relational.core.mapping.Table;

@Table("employee")
public class EmployeeEntity {
    
    @Id
    private String id;
    private String name;
    private int age;
    
    // Getters and setters
}
```

**EmployeeDTO.java:**

```java
public class EmployeeDTO {
    
    private String id;
    private String name;
    private int age;
    
    // Getters and setters
}
```

**EmployeeMapper.java:**

```java
import org.mapstruct.Mapper;

@Mapper
public interface EmployeeMapper {
    
    EmployeeDTO toDto(EmployeeEntity entity);
}
```

**EmployeeRepository.java:**

```java
import org.springframework.data.repository.reactive.ReactiveCrudRepository;
import reactor.core.publisher.Mono;

public interface EmployeeRepository extends ReactiveCrudRepository<EmployeeEntity, String> {
    
    Mono<EmployeeEntity> findById(String id);
}
```

**EmployeeService.java:**

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class EmployeeService {
    
    @Autowired
    private EmployeeRepository employeeRepository;
    
    @Autowired
    private EmployeeMapper employeeMapper;
    
    public List<EmployeeDTO> getEmployeeById(String id) {
        return employeeRepository.findById(id)
                .map(employeeMapper::toDto)
                .collectList()
                .block();
    }
}
```

**EmployeeController.java:**

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class EmployeeController {
    
    @Autowired
    private EmployeeService employeeService;
    
    @GetMapping("/employee")
    public List<EmployeeDTO> getEmployee(@RequestParam String id) {
        return employeeService.getEmployeeById(id);
    }
}
```

Make sure to configure the connection properties in `application.properties`. Replace the placeholders in the code with actual values according to your setup.

This setup uses R2DBC for reactive database access, MapStruct for object mapping, and Spring Boot for the application framework. Adjust the code and configurations as needed for your specific requirements and environment.
