Certainly! If you want to directly return a `List<EmployeeDTO>` without using `Mono` or `Flux`, you can modify the service and controller accordingly:

**1. Update `EmployeeService` to return `List<EmployeeDTO>`:**

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class EmployeeService {
    
    @Autowired
    private EmployeeRepository employeeRepository;
    
    @Autowired
    private EmployeeMapper employeeMapper;
    
    public List<EmployeeDTO> getEmployeeById(String id) {
        return employeeRepository.findById(id)
                .map(employeeMapper::toDto)
                .collect(Collectors.toList());
    }
}
```

**2. Update `EmployeeController` to return `List<EmployeeDTO>`:**

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class EmployeeController {
    
    @Autowired
    private EmployeeService employeeService;
    
    @GetMapping("/employee")
    public List<EmployeeDTO> getEmployee(@RequestParam String id) {
        return employeeService.getEmployeeById(id);
    }
}
```

By making these changes, the `EmployeeService` will directly return a `List<EmployeeDTO>`, and the `EmployeeController` will return this list in response to the API call. This approach doesn't involve reactive programming and directly works with synchronous processing. Adjust other parts of your application accordingly if you were relying on reactive features elsewhere.
