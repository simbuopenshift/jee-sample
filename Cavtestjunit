import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.Job;
import com.google.cloud.bigquery.JobInfo;
import com.google.cloud.bigquery.QueryJobConfiguration;
import com.google.cloud.bigquery.TableId;
import com.google.cloud.bigquery.ExtractJobConfiguration;
import com.google.cloud.bigquery.JobStatus;
import com.google.cloud.bigquery.BigQueryException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

public class BigQueryTest {

    @Mock
    private BigQuery bigquery;

    @Mock
    private Job queryJob;

    @Mock
    private Job extractJob;

    @Mock
    private JobStatus jobStatus;

    @Mock
    private TableId tableId;

    @InjectMocks
    private YourClassUnderTest yourClassUnderTest;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testBigQueryOperations() {
        // Define the query and other parameters
        String query = "SELECT * FROM your_table";
        String csv = "CSV";
        String blobUri = "gs://your-bucket/your-object";

        // Mock the QueryJobConfiguration
        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();

        // Mock the JobInfo for the query job
        JobInfo queryJobInfo = JobInfo.newBuilder(queryConfig).build();

        // Stub the bigquery.create method to return the mock query job
        when(bigquery.create(eq(queryJobInfo))).thenReturn(queryJob);

        // Mock the behavior of queryJob.getConfiguration() to return the queryConfig
        when(queryJob.getConfiguration()).thenReturn(queryConfig);

        // Mock the behavior of queryJob.getStatus() and queryJob.getStatus().getError()
        when(queryJob.getStatus()).thenReturn(jobStatus);
        when(jobStatus.getError()).thenReturn(null);

        // Mock the behavior of queryConfig.getDestinationTable() to return the tableId
        when(((QueryJobConfiguration) queryJob.getConfiguration()).getDestinationTable()).thenReturn(tableId);

        // Mock the ExtractJobConfiguration
        ExtractJobConfiguration extractJobConfig = ExtractJobConfiguration.newBuilder(tableId, blobUri)
                .setPrintHeader(false)
                .setFormat(csv)
                .build();

        // Mock the JobInfo for the extract job
        JobInfo extractJobInfo = JobInfo.newBuilder(extractJobConfig).build();

        // Stub the bigquery.create method to return the mock extract job
        when(bigquery.create(eq(extractJobInfo))).thenReturn(extractJob);

        // Call the method under test
        yourClassUnderTest.methodUnderTest(query, blobUri);

        // Verify that bigquery.create was called with the correct JobInfo for the query job
        verify(bigquery).create(eq(queryJobInfo));

        // Verify that bigquery.create was called with the correct JobInfo for the extract job
        verify(bigquery).create(eq(extractJobInfo));

        // Ensure no more interactions with the BigQuery mock
        verifyNoMoreInteractions(bigquery);
    }

    @Test
    public void testQueryJobIsNull() {
        // Define the query and other parameters
        String query = "SELECT * FROM your_table";
        String blobUri = "gs://your-bucket/your-object";

        // Stub the bigquery.create method to return null
        when(bigquery.create(any(JobInfo.class))).thenReturn(null);

        // Assert that the method under test throws an exception
        assertThrows(Exception.class, () -> yourClassUnderTest.methodUnderTest(query, blobUri));

        // Verify that bigquery.create was called once
        verify(bigquery).create(any(JobInfo.class));

        // Ensure no more interactions with the BigQuery mock
        verifyNoMoreInteractions(bigquery);
    }

    @Test
    public void testQueryJobHasError() {
        // Define the query and other parameters
        String query = "SELECT * FROM your_table";
        String blobUri = "gs://your-bucket/your-object";

        // Mock the QueryJobConfiguration
        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();

        // Mock the JobInfo for the query job
        JobInfo queryJobInfo = JobInfo.newBuilder(queryConfig).build();

        // Stub the bigquery.create method to return the mock query job
        when(bigquery.create(eq(queryJobInfo))).thenReturn(queryJob);

        // Mock the behavior of queryJob.getStatus() and queryJob.getStatus().getError()
        when(queryJob.getStatus()).thenReturn(jobStatus);
        when(jobStatus.getError()).thenReturn(new BigQueryException(500, "Error occurred"));

        // Assert that the method under test throws an exception
        assertThrows(Exception.class, () -> yourClassUnderTest.methodUnderTest(query, blobUri));

        // Verify that bigquery.create was called once
        verify(bigquery).create(eq(queryJobInfo));

        // Ensure no more interactions with the BigQuery mock
        verifyNoMoreInteractions(bigquery);
    }
}
