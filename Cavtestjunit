import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.Job;
import com.google.cloud.bigquery.JobInfo;
import com.google.cloud.bigquery.QueryJobConfiguration;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

public class BigQueryTest {
    
    @Mock
    private BigQuery bigquery;

    @Mock
    private Job job;

    @InjectMocks
    private YourClassUnderTest yourClassUnderTest;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testQueryJobConfiguration() {
        // Define the query you want to use
        String query = "SELECT * FROM your_table";

        // Mock the QueryJobConfiguration
        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();

        // Mock the JobInfo
        JobInfo jobInfo = JobInfo.newBuilder(queryConfig).build();

        // Stub the bigquery.create method to return the mock job
        when(bigquery.create(any(JobInfo.class))).thenReturn(job);

        // Call the method under test
        yourClassUnderTest.methodUnderTest(query);

        // Verify that bigquery.create was called with the correct JobInfo
        verify(bigquery).create(eq(jobInfo));
    }
}
